# Basic algorithm for finding the deepest pit:
# For each low point compute the minimum of the lengths of right and left arms /\/\/\/\/\/\/\
# A low point(pit) is the element that is smaller than its neighbours.
# Time complexity:  O(N)
# Space Complexity: O(1)
# Author: Mehmet Emin Turanalp, 01/20/2018
#
A=[0, 1, 3, -2, 0, 1, 0, -3, 2, 3]
B=[3,0,6,2,-1,-4,1,-5,-8,4,7,1,5]
C=[100000000,0,100000000,2,-100000000,-2,100000000,-3,-100000000,50000000]
D=[5,1,-2,3]
E=[2,5,6,3,1,-5]
F=[5,6,4]

def solution(A):
    dP,dleft,dright,dPt = 0,0,0,0    
    for i in range(1,len(A)-1) :   
        if ((A[i]<A[i+1]) and (A[i]<A[i-1])): # i is the bottom of a pit
           dleft,dright = 0,0
           for j in range(i,0,-1):
               if (A[j-1]>A[j]):
                   dleft=dleft+(A[j-1]-A[j]) 
               else:
                   break  # computation of left arm is complete
           for j in range(i,len(A)-1):
               if (A[j]<A[j+1]):
                   dright=dright+(A[j+1]-A[j])
               else:
                   break  # computation of rigth arm is complete    
           dPt = dleft if (dleft<dright) else dright # min of the two arms is the depth of the pit
           dP = dPt if (dP<dPt) else dP
            
    return dP if (dP!=0) else -1

solution(A)
solution(B)
#solution(C)
#solution(D)
#solution(E)
#solution(F)
solution(B)
solution(C)
solution(D)
solution(E)
solution(F)